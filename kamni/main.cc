/*
 * main.cc
 *
 *  Created on: 30 –Ω–æ—è–±. 2020 –≥.
 *      Author: –õ–µ–≤
 */
#include <iostream>
#include <random>
#include <chrono>
#include <sstream>

int ii_turn(int stone_count){
	if (stone_count==1 || stone_count==2)
		return 1;
	else if (stone_count==3)
		return 2;
	else if (stone_count==4)
		return 3;
	else if(stone_count==5)
		return 1;
	else if(stone_count==6)
			return 2;
	else return 0;
}

int read_int(const char * question)
{
			int result;
			std::string inp;
			re:std::cout<<question;
			std::getline(std::cin, inp);
			{
				std::stringstream inps{inp};
				inps >> result;
				if (inps.fail()){
					if(std::cin.fail()){
						std::cerr << "Error!" << std::endl;
						exit(1);
					}
					std::cout << "¬‚Â‰Ë ˜ËÒÎÓ!" << std::endl;
					goto re;
				}else if(not inps.eof()){
						std::cout << "–í–≤–µ–¥–∏ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É!" << std::endl;
						goto re;
					}
			}
			return result;
}
int menu_v=0;
int menu()
{
	menuqwe:std::cout << "¬˚·ÂËÚÂ ÒÎÓÊÌÓÒÚ¸ Ë„˚" << std::endl;
	std::cout << "1. –õ—ë–≥–∫–∏–π" << std::endl;
	std::cout << "2. –°–ª–æ–∂–Ω—ã–π" << std::endl;
	std::cout << "0. –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã" << std::endl;
	menu_v = read_int("–í—ã–±–æ—Ä: ");
	switch (menu_v)
		{
		case 1:
			return 1;
			break;
		case 2:
			return 2;
			break;
		case 0:
			return 0;
			break;
		default:
			std::cout << "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤—ã—Ä–∏–∞–Ω—Ç–∞!";
			break;
		}
	goto menuqwe;
}
int main()
{

	using clk=std::chrono::system_clock;
		std::minstd_rand rnd{
			unsigned(clk::now().time_since_epoch().count())
	};
	std::cout << "–î–æ–±—Ä–æ –≤ –∏–≥—Ä—É –∫–∞–º–Ω–∏." << std::endl;
	menu_v=menu();
				switch (menu_v)
						{
						case 1:
							std::cout << "–õ—ë–≥–∫–∏–π –±–æ—Ç!"<< std::endl;
							break;
						case 2:
							std::cout << "–°–ª–æ–∂–Ω—ã–π –±–æ—Ç!"<< std::endl;
							break;
						case 0:
							std::cout << "–ü–æ–∫–∞!"<< std::endl;
							return 0;
							break;
						default:
							std::cout << "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤—ã—Ä–∏–∞–Ω—Ç–∞!";
							break;
						}

	nextgame:std::uniform_int_distribution <int> d{15,25};
	std::uniform_int_distribution <int> min_stone{1,3};
	unsigned stone_count = d(rnd);
	unsigned stone;



	do{
			qre:std::cout << "–í –∫—É—á–µ " << stone_count << " –∫–∞–º–Ω–µ–π." << std::endl;
			std::cout << "–°–∫–æ–ª—å–∫–æ –≤–∑—è—Ç—å? (–æ—Ç 1 –¥–æ 3) " << std::endl;
			stone = read_int("–°–∫–æ–ª—å–∫–æ: ");
			std::cout << "–¢—ã –≤–∑—è–ª: " << stone << std::endl;

			if(stone<=3 && stone<=stone_count && stone>=1){
				stone_count-=stone;
			}
			else{ std::cout << "–ù–µ–ª—å–∑—è —Å—Ç–æ–ª—å–∫–æ –±—Ä–∞—Ç—å!" << std::endl;
				goto qre;}
			{
			if (stone_count==0){
				std::cout << "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!" << std::endl;
				break;
			}
			if (menu_v==2)
				stone=ii_turn(stone_count);
			else stone=0;
			if(stone==0)
				qwe1:stone=min_stone(rnd);
			if(stone<=3 && stone<=stone_count && stone>=1){
				stone_count-=stone;
			}
			else{
				goto qwe1;
			}
			std::cout << "–ë–æ—Ç –≤–∑—è–ª " << stone << " –∫–∞–º–Ω–µ–π." << std::endl;
			}
			if(stone_count==0){
				std::cout << "–û—Å—Ç–∞–ª–æ—Å—å " << stone_count << " –∫–∞–º–Ω–µ–π." << std::endl;
				std::cout << "–¢—ã –≤—ã–∏–≥—Ä–∞–ª!" << std::endl;
				break;
			}
			else if(stone_count==1){
				std::cout << "–û—Å—Ç–∞–ª–æ—Å—å " << stone_count << " –∫–∞–º–Ω–µ–π." << std::endl;
				std::cout << "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!" << std::endl;
				break;
			}

		} while(stone_count!=0);

		std::cout << "–ï—â—ë —Ä–∞–∑?" << std::endl;
		iim:stone = read_int("1 –¥–∞, 2 –Ω–µ—Ç");
		if( stone==1 || stone==2 ){
			if(stone==1)
				goto nextgame;
			else if (stone==2)
				std::cout << "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" << std::endl;
			menu_v=menu();
							switch (menu_v)
									{
									case 1:
										std::cout << "–õ—ë–≥–∫–∏–π –±–æ—Ç!"<< std::endl;
										goto nextgame;
										break;
									case 2:
										std::cout << "–°–ª–æ–∂–Ω—ã–π –±–æ—Ç!"<< std::endl;
										goto nextgame;
										break;
									case 0:
										std::cout << "–ü–æ–∫–∞!"<< std::endl;
										return 0;
										break;
									default:
										std::cout << "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤—ã—Ä–∏–∞–Ω—Ç–∞!";
										break;
									}

			}
		else {
			std::cout << "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞!" << std::endl;
			goto iim;}
	return 0;
}




